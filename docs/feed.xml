<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
 <title>Posts</title>
 <link>https://engledow.me/diary/index.html</link>
 <description>Posts</description>
 <pubDate>Thu, 29 Aug 2024 12:58:49 +0100</pubDate>
 <atom:link href="https://engledow.me/feed.xml" rel="self" type="application/rss+xml" />
 <item>
  <title>2024-08-28</title>
  <link>https://engledow.me/diary/2024-08-28.html</link>
  <guid isPermaLink="false">2024-08-28</guid>
  <description><![CDATA[
<p>
<span id="-game"></span><span class="tag" id="game">game</span> <span id="-dev"></span><span class="tag" id="dev">dev</span>
</p>

<p>
In tidying up my corner of the interwebs, I put together a list of <a href="../projects.html">projects</a> that I've worked on over the years. One of those is <a href="../projects.html#Games">Falsoyd</a>. I commented "I don't know if it even compiles on modern systems". Of course, that stuck in my head and inevitably I had to try...
</p>

<p>
Hoooo boy.
</p>

<p>
It has been a <em>long time</em> since I wrote anything in my <a href="2014-01-31.html">once-favourite language, C</a> (or C++). <a href="https://github.com/search?q=user%3Astilvoid+AND+%28language%3AC+OR+language%3AC%2B%2B%29&amp;type=code">A GitHub search</a> suggests it's been around 10 years. Fortunately, I had no intentions of really fixing any coding problems - just getting Falsoyd to run by brute force :D
</p>

<div id="It starts"><h2 id="It starts" class="header"><a href="#It starts">It starts</a></h2></div>

<pre>
git clone git@github.com:stilvoid/falysoyd
cd falsoyd
make
...
sdl-config: command not found
fatal error: 'SDL_mixer.h' file not found
</pre>

<p>
Oh yeah, this was all SDL. Oh well, I'm sure that's still around!
</p>

<pre>
brew install sdl
Warning: Formula sdl was renamed to sdl12-compat.
</pre>

<p>
Ok well, it turns out SDL1.2 is looong deprecated but some kind person has written a compatibility library for SDL2 so that should all work quite nicely...
</p>

<pre>
make
fatal error: 'SDL_mixer.h' file not found
brew install sdl_mixer
Error: sdl_mixer has been disabled because it is deprecated upstream! It was disabled on 2024-02-07.
</pre>

<p>
If only I had tried this 6 months ago ;) After a quick look, SDL2_mixer seems to have the same API as in SDL1.2 so I'll nab the header file from there, include it in my CFLAGS, and link to SDL2_mixer in addition to the SDL1.2 (compat) library. What could possibly go wrong?!
</p>

<pre>
make
...
src/map.h:35:6: error: cast from pointer to smaller type 'int' loses information
        p.x=(int)x;
            ^~~~~~
src/map.h:36:6: error: cast from pointer to smaller type 'int' loses information
        p.y=(int)y;
</pre>

<p>
Ooh, an actual bug. Forgot to dereference some pointers. I wonder how that ever worked before. Well, it's an easy fix!
</p>

<pre>
make
...
g++  src/world.o src/audio.o src/score.o src/bonus.o src/shot.o src/sprite.o src/ship.o src/alien.o src/main.o -o src/falsoyd `sdl-config --libs` -lSDL2_mixer
</pre>

<p>
It compiled! That was unexpectedly easy. I was anticipating some nastiness with mixing SDL1.2 and SDL2_mixer.
</p>

<p>
(I glossed over <em>a lot</em> of compiler warnings in that "..." btw. Don't ignore your compiler warnings, folks!)
</p>

<p>
My fingers began to tremble (they didn't) as I nervously (I wasn't) typed <code>./src/falsoyd</code>...
</p>

<p>
<img src="https://static.offend.me.uk/media/images/2024-08-28-falsoyd.png" alt="A screenshot of Falsoyd" />
</p>

<p>
It runs! I played it for a little while. Remembered how terrible it was and committed <a href="https://github.com/stilvoid/falsoyd/tree/2024">a branch</a> with my changes. That'll do for now. Itch scratched.
</p>

<p>
Now I'm clearly going to have to make Falsoyd 2 in LÃ¶ve, Pico-8, or Picotron ;)
</p>
]]></description>
  <pubDate>Wed, 28 Aug 2024 00:00:00 +0100</pubDate>
 </item>
 <item>
  <title>2024-07-23</title>
  <link>https://engledow.me/diary/2024-07-23.html</link>
  <guid isPermaLink="false">2024-07-23</guid>
  <description><![CDATA[
<p>
<span id="-text"></span><span class="tag" id="text">text</span> <span id="-vim"></span><span class="tag" id="vim">vim</span> <span id="-wiki"></span><span class="tag" id="wiki">wiki</span> <span id="-site"></span><span class="tag" id="site">site</span>
</p>

<p>
I like text, plain text. Always have. But over the past several years (and it has been, as the kids say, a hot minute since I <a href="2019-11-13.html">last blogged</a>) I've found more and more bloat creeping into my daily life. I moved to a Mac Mini as my main machine about 4 years ago as I just gave up in the struggle between the way I think things ought to be and the "needs" of life working for a large corporate. In fairness, I have come to more or less enjoy MacOS but whenever I slip back into my Arch box with my i3 desktop, it feels <em>so sleek</em>.
</p>

<p>
Moving to the Mac has necessarily meant changing some of my regular workflow and tools. I don't know what it is about the Mac but it seemed to discourage me from being so heavily terminal-based as I was. I really can't put my finger on it. Regardless, I ended up moving from taking notes in markdown to <a href="https://obsidian.md/">Obsidian</a> for a while and then eventually <a href="https://logseq.com/">Logseq</a>. Still just markdown files in a folder but the GUI is ever-present. I even found myself starting to use, and almost enjoy, <a href="https://code.visualstudio.com/">VS Code</a>!
</p>

<p>
Anyway, the point is, through <a href="https://latenightlinux.com/late-night-linux-episode-289/">Late Night Linux</a>, I discovered <a href="https://vimwiki.github.io/">Vimwiki</a> and have started to love the terminal (and Vim) again. In fact, I started writing some code the other day and just automatically started it in Vim rather than VS Code. The rot is beginning to recede eh ;)
</p>

<p>
One of the tasks I decided to bring over to Vimwiki was maintaining my small and fairly pointless <a href="https://engledow.me">website</a>. In another show of bloat, I had been through various markdown-to-website tools (ghost, hugo, jekyll), decided I disliked something about each one, and ended up rolling my own Python cruft. Inevitably, I came back to the site to make some changes after a few months and had <em>completely</em> forgotten how any of it was meant to work :) And that is what led me to the decision to try Vimwiki for the site as well as my note-taking.
</p>

<p>
The first challenge is that, while Vimwiki supports markdown syntax, it doesn't support it very well and requires more plugins to get it to spit out html. Over the years, my enthusiasm for markdown has waned considerably. I like the overall style of the markup but it's just too ambiguous and ends up causing more problems than it solves. So... the tool I want to use has it's own syntax and I'm not tied to my usual preference... obviously it's time to figure out how to convert all my existing <a href="index.html">posts</a> ;)
</p>

<p>
I spent a nice afternoon discovering that <a href="https://pandoc.org/">pandoc</a> is even more lovely than I had previously realised. Writing a new reader or writer for it is almost trivial. You write a lua file, create a few functions to parse/create text in various formats (e.g. emphasised, code blocks, bullet points), and then point pandoc at your lua file as if it were any other reader/writer option.
</p>

<p>
So here we are. This very infrequently updated blog is now written in vimwiki and I'm back to using the terminal and Vim on a daily basis like the <a href="2017-07-10.html">last few years</a> never happened.
</p>

<p>
Now to see what else I can over-enthusiastically convince myself should be a Wiki...
</p>
]]></description>
  <pubDate>Tue, 23 Jul 2024 00:00:00 +0100</pubDate>
 </item>
 <item>
  <title>2019-11-13</title>
  <link>https://engledow.me/diary/2019-11-13.html</link>
  <guid isPermaLink="false">2019-11-13</guid>
  <description><![CDATA[
<p>
<span id="-linux"></span><span class="tag" id="linux">linux</span> <span id="-arch"></span><span class="tag" id="arch">arch</span> <span id="-dev"></span><span class="tag" id="dev">dev</span> <span id="-tool"></span><span class="tag" id="tool">tool</span>
</p>

<p>
This post is about the <a href="https://aur.archlinux.org/">Arch User Repository</a>. If you're not an <a href="https://www.archlinux.org/">Arch</a> user, probably just move along ;)
</p>

<p>
There are <a href="https://aur.archlinux.org/packages/?O=0&amp;K=aur+helper">lots of AUR helpers</a> in existence already but, in the best traditions of open source, none of them work exactly how I want an AUR helper to work, so I <a href="https://xkcd.com/927/">created a new one</a>.
</p>

<p>
Here it is: <a href="https://github.com/stilvoid/maur">https://github.com/stilvoid/maur</a>
</p>

<p>
<code>maur</code> (pronounced like "more") is tiny. At the time of writing, it's 49 lines of bash. It also has very few features.
</p>

<p>
Here is the list of features:
</p>

<ul>
<li>
Help text when you type <code>maur --help</code> or <code>maur -h</code>

<li>
A list of packages in the AUR when you type <code>maur</code> with no arguments

<li>
Help you install a package when you type <code>maur &lt;package name&gt;</code>

</ul>
<p>
The "help" when installing a package is this, and nothing more:
</p>

<ul>
<li>
Clone the package's AUR repository

<li>
Open the <code>PKGBUILD</code> in your default editor

<li>
Ask if you want to continue installing

<li>
If you do, run <code>makepkg -si</code>

</ul>
<p>
If you think <code>maur</code> needs more features, use a different AUR helper.
</p>

<p>
If you find bugs, please <a href="https://github.com/stilvoid/maur/issues/new">submit an issue</a> or, even better, a <a href="https://github.com/stilvoid/maur/compare">pull request</a>.
</p>

<div id="Example usage"><h2 id="Example usage" class="header"><a href="#Example usage">Example usage</a></h2></div>

<div id="Example usage-Searching the AUR"><h3 id="Searching the AUR" class="header"><a href="#Example usage-Searching the AUR">Searching the AUR</a></h3></div>

<p>
If you want to search for a package in the AUR, you can grep for it ;)
</p>

<p>
<code>maur | grep maur</code>
</p>

<div id="Example usage-Installing a package"><h3 id="Installing a package" class="header"><a href="#Example usage-Installing a package">Installing a package</a></h3></div>

<p>
If you want to install a package, for example <a href="https://aur.archlinux.org/packages/yay">yay</a>:
</p>

<p>
<code>maur yay</code>
</p>

<div id="Example usage-Upgrading a package"><h3 id="Upgrading a package" class="header"><a href="#Example usage-Upgrading a package">Upgrading a package</a></h3></div>

<p>
Upgrade a package is the same as installing one. This will upgrade <code>maur</code>:
</p>

<p>
<code>maur maur</code>
</p>
]]></description>
  <pubDate>Wed, 13 Nov 2019 00:00:00 +0000</pubDate>
 </item>
 <item>
  <title>2019-02-12</title>
  <link>https://engledow.me/diary/2019-02-12.html</link>
  <guid isPermaLink="false">2019-02-12</guid>
  <description><![CDATA[
<p>
<span id="-aws"></span><span class="tag" id="aws">aws</span> <span id="-git"></span><span class="tag" id="git">git</span> <span id="-dev"></span><span class="tag" id="dev">dev</span>
</p>

<p>
(Cross-posted from <a href="https://aws.amazon.com/blogs/devops/using-git-with-aws-codecommit-across-multiple-aws-accounts/">the AWS DevOps blog</a>)
</p>

<p>
I use <a href="https://aws.amazon.com/codecommit/">AWS CodeCommit</a> to host all of my private Git repositories. My repositories are split across several AWS accounts for different purposes: personal projects, internal projects at work, and customer projects.
</p>

<p>
The <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up.html">CodeCommit documentation</a> shows you how to configure and clone a repository from one place, but in this blog post I want to share how I manage my Git configuration across multiple AWS accounts.
</p>

<div id="Background"><h2 id="Background" class="header"><a href="#Background">Background</a></h2></div>

<p>
First, I have <a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-multiple-profiles.html">profiles</a> configured for each of my AWS environments. I connect to some of them using <a href="https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys">IAM user credentials</a> and others by using <a href="https://aws.amazon.com/blogs/security/how-to-use-a-single-iam-user-to-easily-access-all-your-accounts-by-using-the-aws-cli/">cross-account roles</a>.
</p>

<p>
I intentionally do not have any credentials associated with the default profile. That way I must always be sure I have selected a profile before I run any AWS CLI commands.
</p>

<p>
Hereâs an anonymized copy of my <code>~/.aws/config</code> file:
</p>

<pre>
[profile personal]
region = eu-west-1
aws_access_key_id = AKIAIOSFODNN7EXAMPLE
aws_secret_access_key = wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY

[profile work]
region = us-east-1
aws_access_key_id = AKIAIOSFODNN7EXAMPLE
aws_secret_access_key = wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY

[profile customer]
region = eu-west-2
source_profile = work
role_arn = arn:aws:iam::123456789012:role/CrossAccountPowerUser
</pre>

<p>
If I am doing some work in one of those accounts, I run <code>export AWS_PROFILE=work</code> and use the AWS CLI as normal.
</p>

<div id="The problem"><h2 id="The problem" class="header"><a href="#The problem">The problem</a></h2></div>

<p>
I use the <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-https-unixes.html">Git credential helper</a> so that the Git client works seamlessly with CodeCommit. However, because I use different profiles for different repositories, my use case is a little more complex than the average.
</p>

<p>
In general, to use the credential helper, all you need to do is place the following options into your <code>~/.gitconfig</code> file, like this:
</p>

<pre>
[credential]
    helper = !aws codecommit credential-helper $@
    UserHttpPath = true
</pre>

<p>
I could make this work across accounts by setting the appropriate value for <code>AWS_PROFILE</code> before I use Git in a repository, but there is a much neater way to deal with this situation using a feature released in <a href="https://blog.github.com/2017-05-10-git-2-13-has-been-released/">Git version 2.13</a>, <a href="https://git-scm.com/docs/git-config#_includes">conditional includes</a>.
</p>

<div id="A solution"><h2 id="A solution" class="header"><a href="#A solution">A solution</a></h2></div>

<p>
First, I separate my work into different folders. My <code>~/code/</code> directory looks like this:
</p>

<pre>
code
    personal
        repo1
        repo2
    work
        repo3
        repo4
    customer
        repo5
        repo6
</pre>

<p>
Using this layout, each folder that is directly underneath the code folder has different requirements in terms of configuration for use with CodeCommit.
</p>

<p>
Solving this has two parts; first, I create a <code>.gitconfig</code> file in each of the three folder locations. The <code>.gitconfig</code> files contain any customization (specifically, configuration for the credential helper) that I want in place while I work on projects in those folders.
</p>

<p>
For example:
</p>

<pre>
[user]
    # Use a custom email address
    email = sengledo@amazon.co.uk

[credential]
    # Note the use of the --profile switch
    helper = !aws --profile work codecommit credential-helper $@
    UseHttpPath = true
</pre>

<p>
I also make sure to specify the AWS CLI profile to use in the <code>.gitconfig</code> file which means that, when I am working in the folder, I donât need to set <code>AWS_PROFILE</code> before I run <code>git push</code>, etc.
</p>

<p>
Secondly, to make use of these folder-level .gitconfig files, I need to reference them in my global Git configuration at <code>~/.gitconfig</code>
</p>

<p>
This is done through the <code>includeIf</code> section. For example:
</p>

<pre>
[includeIf "gitdir:~/code/personal/"]
    path = ~/code/personal/.gitconfig
</pre>

<p>
This example specifies that if I am working with a Git repository that is located anywhere under <code>~/code/personal/</code>, Git should load additional configuration from <code>~/code/personal/.gitconfig</code>. That additional file specifies the appropriate credential helper invocation with the corresponding AWS CLI profile selected as detailed earlier.
</p>

<p>
The contents of the new file are treated as if they are inserted into the main <code>.gitconfig</code> file at the location of the <code>includeIf</code> section.  This means that the included configuration will only override any configuration specified <span id="A solution-earlier"></span><strong id="earlier">earlier</strong> in the config.
</p>
]]></description>
  <pubDate>Tue, 12 Feb 2019 00:00:00 +0000</pubDate>
 </item>
 <item>
  <title>2018-11-08</title>
  <link>https://engledow.me/diary/2018-11-08.html</link>
  <guid isPermaLink="false">2018-11-08</guid>
  <description><![CDATA[
<p>
<span id="-dev"></span><span class="tag" id="dev">dev</span> <span id="-git"></span><span class="tag" id="git">git</span> <span id="-tool"></span><span class="tag" id="tool">tool</span>
</p>

<p>
Because I work on a lot of different projects spread across a lot of accounts at multiple git hosting providers, I try to keep my code folder in some semblance of order by having subfolders for things.
</p>

<p>
A while ago, I decided to make things even simpler by letting the git repos I was cloning dictate where they should live. I took inspiration from <a href="https://golang.org/doc/code.html#ImportPaths">the way go expects you to organise your code</a>.
</p>

<p>
Today, I decided to apply <a href="http://threevirtues.com/">the three virtues</a> and wrote some code to handle this for me.
</p>

<div id="Introducing git-get"><h2 id="Introducing git-get" class="header"><a href="#Introducing git-get">Introducing git-get</a></h2></div>

<p>
<a href="https://github.com/stilvoid/git-get">git-get</a> is an opinionated git command that helps you keep your code folder in order.
</p>

<p>
You use git-get as a replacement for <code>git clone</code> and it will decide where your code should live :)
</p>

<pre>
git get https://github.com/stilvoid/git-get
Cloning into '/home/steve/code/github.com/stilvoid/git-get'...
</pre>

<p>
Laziness is the primary virtue.
</p>
]]></description>
  <pubDate>Thu, 08 Nov 2018 00:00:00 +0000</pubDate>
 </item>
 <item>
  <title>2018-08-14</title>
  <link>https://engledow.me/diary/2018-08-14.html</link>
  <guid isPermaLink="false">2018-08-14</guid>
  <description><![CDATA[
<p>
<span id="-dev"></span><span class="tag" id="dev">dev</span> <span id="-game"></span><span class="tag" id="game">game</span>
</p>

<p>
For the end result of this post, see <a href="https://aur.archlinux.org/packages/heroes/">my AUR package of Heroes</a>.
</p>

<hr />

<p>
The other day, something reminded me of a game I used to really enjoy playing back in my early days of getting to know Linux. That game was <a href="http://heroes.sourceforge.net">Heroes</a>. It's a clone of <a href="https://en.wikipedia.org/wiki/Snake_(video_game_genre">Snake/Tron/Nibbles</a>) but with some fun additions, a nice graphical style, and some funky visual effects.
</p>

<p>
<img src="https://static.offend.me.uk/media/images/2018-08-14-heroes-screenshot.png" alt="Heroes screenshot" />
</p>

<p>
So, of course, I immediately decided to install it.
</p>

<pre>
$ pacman -Ss heroes
</pre>

<p>
No results. Nothing in the <a href="https://wiki.archlinux.org/index.php/Arch_User_Repository">AUR</a> either. There is only one other course of action: I'm going to create an AUR package for it!
</p>

<p>
It looks like the last change to the game was 16 years ago so it could be fun getting it to compile with a modern toolchain.
</p>

<div id="Getting Heroes to compile in 2018"><h2 id="Getting Heroes to compile in 2018" class="header"><a href="#Getting Heroes to compile in 2018">Getting Heroes to compile in 2018</a></h2></div>

<p>
I put together a basic <a href="https://wiki.archlinux.org/index.php/PKGBUILD">PKGBUILD</a> that pulls down the source and data files from the Heroes sourceforge page and then runs:
</p>

<pre>
./configure
make
</pre>

<p>
Here's the first of what I'm sure are many failure messages:
</p>

<pre>
hedlite.c:48:20: error: static declaration of âtile_set_imgâ follows non-static declaration 
 static a_pcx_image tile_set_img;
                    ^~~~~~~~~~~~
In file included from hedlite.c:44:
const.h:52:20: note: previous declaration of âtile_set_imgâ was here                        
 extern a_pcx_image tile_set_img, font_deck_img;                                            
                    ^~~~~~~~~~~~
</pre>

<p>
Some forewarning: it's been quite some time since I wrote anything serious in C and I was never an expert in it anyway. But I think I know enough to fix this and so just commented out the static declaration as, after poking around in the code a bit, it doesn't seem like it's necessary anyway.
</p>

<p>
Now the compilation succeeds but I get the following error during linking:
</p>

<pre>
/usr/bin/ld: camera.o: undefined reference to symbol 'sin@@GLIBC_2.2.5'
/usr/bin/ld: /usr/lib/libm.so.6: error adding symbols: DSO missing from command line
</pre>

<p>
Turns out that for some reason, the developers forgot to include the math&lt;small&gt;(s)&lt;/small&gt; library. I'm guessing that perhaps it used to be linked by default in a previous version of GCC.
</p>

<pre>
LDFLAGS=-lm ./configure
make
</pre>

<p>
Now it at least compiles correctly! Next up, compiling the data, music, and sound effects packages.
</p>

<p>
Amazingly, those all worked correctly and I was able to play the game!
</p>

<p>
However, this game was written a while ago and originally targeted MS-DOS so it has a window size of 320x200 which looks rather ridiculous on my 1920x1080 desktop ;)
</p>

<p>
<a href="https://static.offend.me.uk/media/images/2018-08-14-heroes.png"><img src="https://static.offend.me.uk/media/images/2018-08-14-heroes-small.png" alt="Tiny Heroes window screenshot" /></a>
</p>

<p>
So I set about trying to set the default screen mode so that the game starts in full screen...
</p>

<p>
Fortunately, it looks like this is relatively easy. I just modified a few variables and changed a command line flag from <code>-F | --full-screen</code> to <code>-W | --windowed</code>.
</p>

<p>
Next up, rather than rely on <a href="https://www.libsdl.org/">SDL</a>'s built-in scaling (it looks blurry and weird), I need to enable Heroes' quadruple flag <code>-4</code> by default. In fact, I removed all the scaling options and just left it to default to scaling 4-fold as that leaves the game with a resolution of 1280x800 which seems a reasonable default these days. I'm sure I'll receive bug reports if it's not ;)
</p>

<p>
The very last thing I've done is to enable the high quality mixer by default and remove the command line option from the game. CPU is a little more abundant now than it was in 2002 ;)
</p>

<p>
<a href="https://aur.archlinux.org/cgit/aur.git/tree/heroes-0.21.patch?h=heroes">Here's my final patch file</a>.
</p>

<div id="Submitting the AUR package"><h2 id="Submitting the AUR package" class="header"><a href="#Submitting the AUR package">Submitting the AUR package</a></h2></div>

<p>
Things have changed since I last submitted a package to the AUR so here's a brief writeup - if only to remind myself in future ;)
</p>

<p>
First step was to update the SSH key in my AUR account as it contained a key from my old machine.
</p>

<p>
Next up, I added a remote to my repository:
</p>

<pre>
$ git remote add aur ssh://aur@aur.archlinux.org/heroes.git
$ git fetch aur  # This step causes AUR to create a record for the package
</pre>

<p>
The next step is to generate AUR's <code>.SRCINFO</code> file and rebase it into every commit (AUR requires this).
</p>

<pre>
$ git filter-branch --tree-filter "makepkg --printsrcinfo &gt; .SRCINFO"
</pre>

<p>
And then push it to the AUR repository:
</p>

<pre>
$ git push -u aur master
</pre>

<div id="Testing it out"><h2 id="Testing it out" class="header"><a href="#Testing it out">Testing it out</a></h2></div>

<p>
I use <a href="https://aur.archlinux.org/packages/packer/">packer</a> to make using AUR easier <a href="https://thethreevirtues.com/">I'm lazy</a>).
</p>

<pre>
$ packer -S heroes
</pre>

<p>
SUCCESS!
</p>

<p>
All in all, this wasn't anywhere near as painful as I'd expected. Time to play some Heroes :D
</p>
]]></description>
  <pubDate>Tue, 14 Aug 2018 00:00:00 +0100</pubDate>
 </item>
 <item>
  <title>2018-06-03</title>
  <link>https://engledow.me/diary/2018-06-03.html</link>
  <guid isPermaLink="false">2018-06-03</guid>
  <description><![CDATA[
<p>
<span id="-dev"></span><span class="tag" id="dev">dev</span> <span id="-tool"></span><span class="tag" id="tool">tool</span>
</p>

<p>
I finally got around to releasing a tool I wrote a while back (git says I started it in November 2015).
</p>

<p>
It's called Shue and <a href="https://github.com/stilvoid/shue">you can find it on github</a>.
</p>

<p>
If you dig back in the <a href="https://github.com/stilvoid/shue/commits/master">commit history</a>, you'll see that Shue was originally intended as a tool for converting rgb colour values into their nearest equivalent <a href="http://www.tldp.org/HOWTO/Bash-Prompt-HOWTO/x329.html">bash colour codes</a>.
</p>

<p>
Shue doesn't do that now as I haven't really needed anything that does it since that one time :) I might bring back that functionality at some point but for now, here's what Shue <span id="-does"></span><strong id="does">does</strong> do:
</p>

<ul>
<li>
Converts colour representations between various rgb formats: 6-digit hex (e.g. <code style='background-color:#ff9900;color:black;'>#ff9900</code>), 3-digit hex (e.g. <code>#f90</code>), and <a href="https://www.w3schools.com/cssref/css_colors_legal.asp">CSS-style</a> RGB values (e.g. <code>rgb(255, 153, 0)</code>.

<li>
Perform a few basic operations on colours before converting to the various representations:

<ul>
<li>
Invert

<li>
Darken

<li>
Lighten

</ul>
</ul>
<p>
I wrote this at the time because I was fiddling with a few websites and frequently needed the above functionality.
</p>

<p>
It's written in <a href="https://golang.org/">Go</a> and there are binaries for Linux, Mac, and Windows on the <a href="https://github.com/stilvoid/shue/releases">releases page</a>.
</p>

<p>
<a href="mailto:steve@engledow.me">Let me know</a> if you find it useful.
</p>
]]></description>
  <pubDate>Sun, 03 Jun 2018 00:00:00 +0100</pubDate>
 </item>
 <item>
  <title>2017-07-10</title>
  <link>https://engledow.me/diary/2017-07-10.html</link>
  <guid isPermaLink="false">2017-07-10</guid>
  <description><![CDATA[
<p>
<span id="-linux"></span><span class="tag" id="linux">linux</span> <span id="-desktop"></span><span class="tag" id="desktop">desktop</span>
</p>

<p>
<a href="2017-06-15.html">Last time</a>, I wrote about trying a few desktop environments to see what's out there, keep things fresh, and keep me from complacency. Well, as with desktop environments, so with text editors. I decided briefly that I would try <a href="https://atom.io/">a few of</a> <a href="https://www.sublimetext.com/">the more recent</a> <a href="https://code.visualstudio.com/">code editors</a> that are around these days. Lured in by their pleasing, modern visuals and their promises of a smooth, integrated experience, I've been meaning to give these a go for a while. Needless to say, as a long-time <a href="https://www.vim.org/">vim</a> user, I just found myself frustrated that I wasn't able to get things done as efficiently in any of those editors as I could in vim ;) I tried installing vim keybindings in Atom but it just wasn't the same as a very limited set of functionality was there. As for the integrated environment, when you have <a href="2014-06-17.html">tmux running by default</a>, everything's integrated anyway.
</p>

<p>
And, as with editors, so once again with desktop environments. I've decided to retract my previous hasty promise and no longer to bother with trying any other environments; <a href="https://i3wm.org/">i3</a> is more than fine :)
</p>

<p>
However, I did spend some time this evening making things a bit prettier so here are some delicious configs for posterity:
</p>

<div id="Configs"><h2 id="Configs" class="header"><a href="#Configs">Configs</a></h2></div>

<div id="Configs-Xresources"><h3 id="Xresources" class="header"><a href="#Configs-Xresources">Xresources</a></h3></div>

<p>
I've switched back to xterm from urxvt because, er... dunno.
</p>

<p>
Anyway, I set some nice colours for terminals and some magic stuff that makes man pages all colourful :)
</p>

<pre>
XTerm*faceName: xft:Hack:regular:size=12
*termName: xterm-256color

! Colourful man pages
*VT100.colorBDMode:     true
*VT100.colorBD:         cyan
*VT100.colorULMode:     true
*VT100.colorUL:         darkcyan
*VT100.colorITMode:     true
*VT100.colorIT:         yellow
*VT100.veryBoldColors:  518

! terminal colours
*foreground:#CCCCCC
*background:#2B2D2E

!black darkgray
*color0:    #2B2D2E
*color8:    #808080
!darkred red
*color1:    #FF0044
*color9:    #F92672
!darkgreen green
*color2:    #82B414
*color10:   #A6E22E
!darkyellow yellow
*color3:    #FD971F
*color11:   #E6DB74
!darkblue blue
*color4:    #266C98
*color12:   #7070F0
!darkmagenta magenta
*color5:    #AC0CB1
*color13:   #D63AE1
!darkcyan cyan
*color6:    #AE81FF
*color14:   #66D9EF
!gray white
*color7:    #CCCCCC
*color15:   #F8F8F2
</pre>

<div id="Configs-Vimrc"><h3 id="Vimrc" class="header"><a href="#Configs-Vimrc">Vimrc</a></h3></div>

<p>
Nothing exciting here except for discovering a few options I hadn't previous known about:
</p>

<pre>
" Show a marker at the 80th column to encourage nice code
set colorcolumn=80
highlight ColorColumn ctermbg=darkblue

" Scroll the text when we're 3 lines from the top or bottom
set so=3

" Use browser-style incremental search
set incsearch

" Override the default background colour in xoria256 to match the terminal background
highlight Normal ctermbg=black

" I like this theme
colorscheme xoria256
</pre>

<div id="Configs-i3"><h3 id="i3" class="header"><a href="#Configs-i3">i3</a></h3></div>

<p>
I made a few colour tweaks to my i3 config so I get colours that match my new Xresources. One day, I might see if it's easy enough to have them both read colour definitions from the same place so I don't have to define things twice.
</p>

<div id="The result"><h2 id="The result" class="header"><a href="#The result">The result</a></h2></div>

<p>
Here's what it looks like:
</p>

<p>
<img src="https://static.offend.me.uk/media/images/blog/89/01.jpg" alt="My new desktop" />
</p>
]]></description>
  <pubDate>Mon, 10 Jul 2017 00:00:00 +0100</pubDate>
 </item>
 <item>
  <title>2017-06-15</title>
  <link>https://engledow.me/diary/2017-06-15.html</link>
  <guid isPermaLink="false">2017-06-15</guid>
  <description><![CDATA[
<p>
<span id="-linux"></span><span class="tag" id="linux">linux</span> <span id="-desktop"></span><span class="tag" id="desktop">desktop</span>
</p>

<p>
Itâs been a while since I last tried out a different desktop environment on my laptop and Iâve been using <a href="https://i3wm.org/">i3</a> for some time now so itâs only fair to give other things a go ;)
</p>

<p>
To test these out, I ran another X display - keeping my original one running so I could switch back and forth to take notes - and started each environment with <code>DISPLAY=:1 &lt;the command to start the desktop&gt;</code>.
</p>

<p>
Iâll start with just one today and perhaps review some others another time.
</p>

<div id="Deepin"><h2 id="Deepin" class="header"><a href="#Deepin">Deepin</a></h2></div>

<p>
In summary: bits of Gnome Shell, Chrome OS, and Mac OSX but not quite as polished as any of them.
</p>

<p>
The Deepin Desktop Environment (DDE - from <a href="https://www.deepin.org/en/?language=en">the Deepin distribution</a>) installed easily enough under Arch with a quick <code>pacman -S deepin deepin-extra</code>. It also started up easily with an unambiguous <code>startdde</code>.
</p>

<p>
Immediately on startup, DDE plays a slightly annoying chime presumably just to remind you of how far weâve come since Windows 95. The initial view of the desktop looks similar to OSX or Chrome OS with file icons on the desktop and a launcher bar centred across the bottom of the screen.
</p>

<p>
<img src="https://static.offend.me.uk/media/images/blog/88/01.jpg" alt="The initial view" />
</p>

<p>
The first thing I tried was clicking on a button labelled Quoted only to be presented with a prompt telling me Quoted and an OK button. So far, so enigmatic. So then I tried a trusty right-click on the desktop which brought up the expected context menu. In the menu was a Quoted option so I plumped for that, thinking that perhaps that was where I could enable the mystic Quoted. Clicking the Quoted button opened a dark-themed panel from the right-hand side, similar to the information panel you get in OSX. I searched through that panel for a good couple of minutes but could find no allusion to any Quoted.
</p>

<p>
<img src="https://static.offend.me.uk/media/images/blog/88/02.jpg" alt="The cryptic message and the settings panel" />
</p>

<p>
Unperturbed, I decided to press on and see what other features Deepin had to offerâ¦
</p>

<p>
Moving the mouse around the desktop a bit, I discovered that Deepin has borrowed some ideas from Gnome shell as well as OSX and Chrome OS. Moving the mouse pointer into the top-left corner of the screen brings up an application list similar to Gnomeâs launcher. The bottom-right corner reveals the settings panel. The top-right does nothing and the bottom-left, wonder of wonders, brings up my old favourite, the Quoted.
</p>

<p>
I poked around in the settings a bit more but didnât really see anything of interest so I fired up what looks to be the last part of Deepin left for me to explore: the file manager. It does the job and itâs not very interesting although I did discover that Deepin also has itâs own terminal emulator (unsurprisingly called <code>deepin-terminal</code>) which has a snazzy <a href="https://en.wikipedia.org/wiki/The_Matrix">Matrix</a> theme to it but is otherwise uninteresting.
</p>

<p>
<img src="https://static.offend.me.uk/media/images/blog/88/03.jpg" alt="Deepin-terminal" />
</p>

<p>
Thatâs it, Iâm bored. Next!
</p>

<p>
I tried Budgie and LXQT for a few minutes each at this point but they werenât immediately interesting enough to make me want to write about them just now :)
</p>
]]></description>
  <pubDate>Thu, 15 Jun 2017 00:00:00 +0100</pubDate>
 </item>
 <item>
  <title>2016-02-25</title>
  <link>https://engledow.me/diary/2016-02-25.html</link>
  <guid isPermaLink="false">2016-02-25</guid>
  <description><![CDATA[
<p>
<span id="-dev"></span><span class="tag" id="dev">dev</span> <span id="-aws"></span><span class="tag" id="aws">aws</span>
</p>

<p>
Maybe itâs just me, but I reckon <a href="https://en.wikipedia.org/wiki/Domain-specific_language">DSLs</a> are the next (ok ok, theyâve been around for ages) big (ok, hipster) thing. I know Iâm by no means the first to say so itâs just that Iâm increasingly bemused at seeing things squeezed into data structures theyâve outgrown.
</p>

<p>
In general, as everyoneâs finally warming to the idea that you can use code to describe not just your application but also how itâs deployed, weâre reaching a state where that code needs to be newbie-friendly - by which I mean that it ought to be easily understandable by humans. If it isnât, itâs prone to mistakes.
</p>

<p>
A few months ago, I experimented with creating a DSL for writing web pages and I was fairly happy with <a href="https://github.com/stilvoid/thiy">the result</a> (though thereâs lots more work to be done). Iâm thinking of applying the same ideas to <a href="https://aws.amazon.com/cloudformation/">CloudFormation</a>.
</p>

<pre>
resources:
    db:
        type: rds
        engine: mysql
        size: c3.xlarge

    app:
        type: ec2
        ami: my-app-image
        size: t2.micro
        scale:
            min: 1
            max: 10
        expose: 80

security:
    db: app
    app: 0.0.0.0:80
</pre>

<p>
Obviously Iâve put little to no thought into the above but it shouldnât be too hard to come up with something useful.
</p>

<p>
Maybe some day soon ;)
</p>
]]></description>
  <pubDate>Thu, 25 Feb 2016 00:00:00 +0000</pubDate>
 </item>
</channel>
</rss>
