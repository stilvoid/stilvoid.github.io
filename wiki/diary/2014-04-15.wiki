%title Netcat

I had occasion recently to need an entry in my ssh config such that connections to a certain host would be proxied through another connection. Several sources suggested the following snippet:

{{{
Host myserver.net
    ProxyCommand nc -x <proxy host>:<proxy port> %h %p
}}}

In my situation, I wanted the connection to be proxied through an ssh tunnel that I already had set up in another part of the config. So my entry looked like:

{{{
Host myserver.net
    ProxyCommand nc -x localhost:5123 %h %p
}}}

Try as I might however, I just _could not_ get it to work, always receiving the following message:

{{{
Error: Couldn't resolve host "localhost:5123"
}}}

After some head scratching, checking and double-checking that I had set up the proxy tunnel correctly, I finally figured out that it was because I had _GNU_ netcat installed rather than _BSD_ netcat. Apparently, most of the people in the internet use BSD netcat :)

Worse, `-x` is a valid option in both netcats but does completely different things depending on which you use; hence the less-than-specific-but-technically-correct error message.

After that revalation, I thought it was worth capturing the commonalities and differences between the options taken by the netcats.

==Common options==

* `-h`

Prints out nc help.

* `-i interval`

Specifies a delay time interval between lines of text sent and received. Also causes a delay time between connections to multiple ports.

* `-l`

Used to specify that nc should listen for an incoming connection rather than initiate a connection to a remote host. It is an error to use this option in conjunction with the -p, -s, or -z options. Additionally, any timeouts specified with the -w option are ignored.

* `-n`

Do not do any DNS or service lookups on any specified addresses, hostnames or ports.

* `-p source_port`

Specifies the source port nc should use, subject to privilege restrictions and availability.

* `-r`

Specifies that source and/or destination ports should be chosen randomly instead of sequentially within a range or in the order that the system assigns them.

* `-s source`

Specifies the IP of the interface which is used to send the packets. For UNIX-domain datagram sockets, specifies the local temporary socket file to create and use so that datagrams can be received. It is an error to use this option in conjunction with the -l option.

* `-t` in BSD Netcat, `-T` in GNU Netcat

Causes nc to send RFC 854 DON’T and WON’T responses to RFC 854 DO and WILL requests. This makes it possible to use nc to script telnet sessions.

* `-u`

Use UDP instead of the default option of TCP. For UNIX-domain sockets, use a datagram socket instead of a stream socket. If a UNIX-domain socket is used, a temporary receiving socket is created in /tmp unless the -s flag is given.

* `-v`

Have nc give more verbose output.

* `-w timeout`

Connections which cannot be established or are idle timeout after timeout seconds. The -w flag has no effect on the -l option, i.e. nc will listen forever for a connection, with or without the -w flag. The default is no timeout.

* `-z`

Specifies that nc should just scan for listening daemons, without sending any data to them. It is an error to use this option in conjunction with the -l option.

==BSD netcat only==

* `-4`

Forces nc to use IPv4 addresses only.

* `-6`

Forces nc to use IPv6 addresses only.

* `-b`

Allow broadcast.

* `-C`

Send CRLF as line-ending.

* `-D`

Enable debugging on the socket.

* `-d`

Do not attempt to read from stdin.

* `-I length`

Specifies the size of the TCP receive buffer.

* `-k`

Forces nc to stay listening for another connection after its current connection is completed. It is an error to use this option without the -l option.

* `-O length`

Specifies the size of the TCP send buffer.

* `-P proxy_username`

Specifies a username to present to a proxy server that requires authentication. If no username is specified then authentication will not be attempted. Proxy authentication is only supported for HTTP CONNECT proxies at present.

* `-q seconds`

after EOF on stdin, wait the specified number of seconds and then quit. If seconds is negative, wait forever.

* `-S`

Enables the RFC 2385 TCP MD5 signature option.

* `-T toskeyword`

Change IPv4 TOS value. toskeyword may be one of critical, inetcontrol, lowcost, lowdelay, netcontrol, throughput, reliability, or one of the DiffServ Code Points: ef, af11 … af43, cs0 … cs7; or a number in either hex or decimal.

* `-U`

Specifies to use UNIX-domain sockets.

* `-V rtable`

Set the routing table to be used. The default is 0.

* `-X proxy_protocol`

Requests that nc should use the specified protocol when talking to the proxy server. Supported protocols are "4" (SOCKS v.4), "5" (SOCKS v.5) and "connect" (HTTPS proxy). If the protocol is not specified, SOCKS version 5 is used.

* `-x proxy_address[:port]`

Requests that nc should connect to destination using a proxy at proxy_address and port. If port is not specified, the well-known port for the proxy protocol is used (1080 for SOCKS, 3128 for HTTPS).

* `-Z`

DCCP mode.

==GNU netcat only==

* `-c`, `--close`

Close connection on EOF from stdin.

* `-e`, `--exec=PROGRAM`

Program to exec after connect.

* `-g`, `--gateway=LIST`

Source-routing hop point[s], up to 8.

* `-G`, `--pointer=NUM`

Source-routing pointer: 4, 8, 12, …

* `-L`, `--tunnel=ADDRESS:PORT`

Forward local port to remote address.

* `-o`, `--output=FILE`

Output hexdump traffic to FILE (implies -x).

* `-t`, `--tcp`

TCP mode (default).

* `-V`, `--version`

Output version information and exit.

* `-x`, `--hexdump`

Hexdump incoming and outgoing traffic.

==Epilogue==

I uninstalled GNU netcat and installed BSD netcat btw ;)
